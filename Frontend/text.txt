import React, { useContext, useEffect, useRef, useState } from 'react';
import { Link, useLocation } from 'react-router-dom';
import OtpPanel from '../components/OtpPanel';
import { useGSAP } from '@gsap/react';
import { gsap } from 'gsap';
import axios from 'axios';
import DoubleTracking from '../components/DoubleTracking';
import { toast } from 'react-toastify';
import MessagingElement from '../components/MessagingElement';
import { socketContext } from '../context/SocketContextt';

const CaptainPickup = () => {
  const [otpPanel, setOtpPanel] = useState(false);
  const [pickupCoords, setPickupCoords] = useState();
  const [copied, setCopied] = useState(false);
  const [messagePanel, setMessagePanel] = useState(false);
  const [message, setMessage] = useState('');
  const [messageCollection, setMessageCollection] = useState([]); // Fixed typo
  const [messageAlert, setMessageAlert] = useState(false);
  
  
  const location = useLocation();
  const { ride } = location.state;

  const [userSocketId, setUserSocketId] = useState(ride.user.socketId);

  const otpPanelRef = useRef();
  const messagePanelRef = useRef();

  // const { socket } = useContext(socketContext);

  // const handleMessageSend = () => {
  //   if (socket && message.trim()) {
  //     socket.emit('send-message', {
  //       msg: message,
  //       toSocket: userSocketId,
  //     });
  //   }
  // };

  // useEffect(() => {
  //   if(!socket) return;

  //   socket.on('socketId-to-captain-from-server', (socketId) => {
  //     setUserSocketId(socketId);

  //     socket.emit('socketId-to-user', {
  //       socketId: socket.id,
  //       userId: ride.user._id
  //     });
  //   })
  // }, [socket]);`

  

  // useEffect(() => {
  //   if (!socket) return;

  //   const handleReceiveMessage = (msg) => {
  //     const messageId = Date.now() + Math.random();
  //     setMessageCollection((prevMsg) => [
  //       ...prevMsg,
  //       { isMe: false, msg: msg, id: messageId },
  //     ]);
  //     setMessageAlert(true);
  //   };

  //   socket.on('recieve-message', handleReceiveMessage); // Register listener

  //   return () => {
  //     socket.off('recieve-message', handleReceiveMessage); // Clean up listener
  //   };
  // }, [socket]);

  // useEffect(() => {
  //   if (!socket || !ride?.captain?._id) return;
  
  //   // Emit 'join' event to update socketId in the backend
  //   socket.emit('join', {
  //     userType: 'captain',
  //     captainId: ride.captain._id,
  //   });
  
  //   // Handle socket disconnection and reconnection
  //   socket.on('connect', () => {
  //     console.log('Socket connected:', socket.id);
  //     socket.emit('join', {
  //       userType: 'captain',
  //       captainId: ride.captain._id,
  //     });

  //     socket.emit('socketId-to-user', {
  //       socketId: socket.id,
  //       userId: ride.user._id
  //     })
  //   });

  //   socket.on('disconnect', () => {
  //     console.log('Socket disconnected');
  //   });
  
  //   return () => {
  //     socket.off('connect');
  //     socket.off('disconnect');
  //   };
  // }, [socket, ride?.captain?._id]);


  // useGSAP(() => {
  //   if (messagePanel) {
  //     gsap.to(messagePanelRef.current, {
  //       transform: 'translateY(0%)',
  //     });
  //   } else {
  //     gsap.to(messagePanelRef.current, {
  //       transform: 'translateY(100%)',
  //     });
  //   }
  // }, [messagePanel]);
  

  useGSAP(() => {
    if (otpPanel) {
      console.log('GSAP running for otpPanel:', otpPanel);
      gsap.to(otpPanelRef.current, {
        y: 0, // Use y: 0 instead of transform for clarity
      });
    } else {
      gsap.to(otpPanelRef.current, {
        y: '100%', // Slide back down
      });
    }
  }, [otpPanel]);

  

  useEffect(() => {
    const handleGetCoordinates = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get(
          `${import.meta.env.VITE_BASE_URL}/maps/get-coordinates?address=${ride.pickup}`,
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
            withCredentials: true,
          }
        );

        if (response.status === 200) {
          console.log(response.data);
          setPickupCoords(response.data);
        }
      } catch (error) {
        console.log(error);
      }
    };

    handleGetCoordinates();
  }, [ride.pickup]);

  const handleCopyNumber = () => {
    navigator.clipboard.writeText(ride.user.phoneNumber).then(() => {
      setCopied(true);
      toast.success('Contact number copied!');
      setTimeout(() => setCopied(false), 2000); // reset after 2 seconds
    }).catch((error) => {
      console.log(error);
    });
  };

  return (
    <div className="relative w-full h-full flex flex-col overflow-hidden">
      <div className="w-full flex-1 relative">
        <Link
          to="/captain-landing-page"
          className="absolute flex justify-center items-center bg-white w-[50px] h-[50px] rounded-full left-4 bottom-4 z-10"
        >
          <i className="ri-home-4-line text-xl"></i>
        </Link>
        {pickupCoords && <DoubleTracking destination={pickupCoords} />}
      </div>
      <div className="w-full p-6 relative flex flex-col gap-4 justify-evenly items-center bg-amber-400">
        <div
          className="w-full flex justify-center items-center absolute top-0"
          onClick={() => {
            setOtpPanel(true);
          }}
        >
          <i className="ri-arrow-up-wide-fill text-4xl text-gray-500"></i>
        </div>
        <div className="flex gap-4 justify-start items-center w-full py-2">
          <div className="flex justify-center items-center rounded-full">
            <i className="ri-map-pin-range-fill text-xl"></i>
          </div>
          <div className="flex flex-col">
            <p className="text-md text-gray-600 font-semibold">Pick up</p>
            <p className="text-lg font-medium">{ride.pickup}</p>
          </div>
        </div>
        <div className="w-full flex justify-between items-center">
          <div className="flex gap-5 justify-start items-center py-2 w-full">
            <button
              className="h-[50px] w-[50px] flex justify-center items-center rounded-full bg-amber-300"
              onClick={handleCopyNumber}
            >
              <i className="ri-phone-fill text-2xl"></i>
            </button>
            <button
              className="relative h-[50px] w-[50px] flex justify-center items-center rounded-full bg-amber-300"
              onClick={() => {
                setMessagePanel(true);
                setMessageAlert(false);
              }}
            >
              <i className="ri-message-2-fill text-2xl"></i>
              {messageAlert && <div className=' bg-red-600 w-[12px] h-[12px] rounded-full absolute top-0 right-0'></div>}
            </button>
          </div>
          <button
            className="w-2/3 bg-green-600 text-white px-4 py-4 font-medium rounded-md flex justify-center items-center"
            onClick={() => {
              setOtpPanel(true);
            }}
          >
            Enter OTP
          </button>
        </div>
      </div>

      <div
        ref={otpPanelRef}
        className="main absolute w-full h-full bottom-0 translate-y-full bg-white z-20 p-6 rounded-t-2xl flex flex-col items-center"
      >
        <div
          className="arrow absolute w-full flex justify-center items-center top-0 z-30 cursor-pointer"
          onClick={(e) => {
            e.stopPropagation();
            console.log('Downward arrow clicked');
            setOtpPanel(false);
          }}
        >
          <i className="ri-arrow-down-wide-fill text-4xl text-gray-600"></i>
        </div>
        {otpPanel && <OtpPanel otpPanel={otpPanel} ride={ride}/>}
      </div>

      {/* <div
        ref={messagePanelRef}
        className=" message absolute w-full h-full bottom-0 translate-y-full bg-white z-0 p-6 rounded-t-2xl flex flex-col items-center"
      >
        <div
          className="absolute w-full flex justify-center items-center top-0"
          onClick={() => {
            setMessagePanel(false);
          }}
        >
          <i className="ri-arrow-down-wide-fill text-4xl text-gray-600"></i>
        </div>
        {messagePanel && <MessagingElement
          setMessage={setMessage}
          message={message}
          handleMessageSend={handleMessageSend}
          setMessageCollection={setMessageCollection} // Fixed typo
          messageCollection={messageCollection}
        />}
      </div> */}
    </div>
  );
};

export default CaptainPickup;